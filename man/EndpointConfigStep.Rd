% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/steps_sagemaker.R
\name{EndpointConfigStep}
\alias{EndpointConfigStep}
\title{Sagemaker EndpointConfigStep task class}
\description{
Creates a Task State to `create an endpoint configuration in SageMaker`
             \url{https://docs.aws.amazon.com/sagemaker/latest/dg/API_CreateEndpointConfig.html}.
}
\section{Super classes}{
\code{\link[stepfunctions:Block]{stepfunctions::Block}} -> \code{\link[stepfunctions:State]{stepfunctions::State}} -> \code{\link[stepfunctions:Task]{stepfunctions::Task}} -> \code{EndpointConfigStep}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{EndpointConfigStep$new()}}
\item \href{#method-clone}{\code{EndpointConfigStep$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="Block" data-id="is_field_allowed">}\href{../../stepfunctions/html/Block.html#method-is_field_allowed}{\code{stepfunctions::Block$is_field_allowed()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="Block" data-id="to_json">}\href{../../stepfunctions/html/Block.html#method-to_json}{\code{stepfunctions::Block$to_json()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id=".next">}\href{../../stepfunctions/html/State.html#method-.next}{\code{stepfunctions::State$.next()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="accept">}\href{../../stepfunctions/html/State.html#method-accept}{\code{stepfunctions::State$accept()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="add_catch">}\href{../../stepfunctions/html/State.html#method-add_catch}{\code{stepfunctions::State$add_catch()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="add_retry">}\href{../../stepfunctions/html/State.html#method-add_retry}{\code{stepfunctions::State$add_retry()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="format">}\href{../../stepfunctions/html/State.html#method-format}{\code{stepfunctions::State$format()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="output">}\href{../../stepfunctions/html/State.html#method-output}{\code{stepfunctions::State$output()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="to_list">}\href{../../stepfunctions/html/State.html#method-to_list}{\code{stepfunctions::State$to_list()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="update_parameters">}\href{../../stepfunctions/html/State.html#method-update_parameters}{\code{stepfunctions::State$update_parameters()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="Task" data-id="allowed_fields">}\href{../../stepfunctions/html/Task.html#method-allowed_fields}{\code{stepfunctions::Task$allowed_fields()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialize EndpointConfigStep class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EndpointConfigStep$new(
  state_id,
  endpoint_config_name,
  model_name,
  initial_instance_count,
  instance_type,
  variant_name = "AllTraffic",
  data_capture_config = NULL,
  tags = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state_id}}{(str): State name whose length **must be** less than or equal
to 128 unicode characters. State names **must be** unique within the
scope of the whole state machine.}

\item{\code{endpoint_config_name}}{(str or Placeholder): The name of the endpoint
configuration to create. We recommend to use :py:class:
`~stepfunctions.inputs.ExecutionInput` placeholder collection to pass
the value dynamically in each execution.}

\item{\code{model_name}}{(str or Placeholder): The name of the SageMaker model to attach
to the endpoint configuration. We recommend to use :py:class:
`~stepfunctions.inputs.ExecutionInput` placeholder collection to pass
the value dynamically in each execution.}

\item{\code{initial_instance_count}}{(int or Placeholder): The initial number of instances
to run in the ``Endpoint`` created from this ``Model``.}

\item{\code{instance_type}}{(str or Placeholder): The EC2 instance type to deploy this
Model to. For example, 'ml.p2.xlarge'.}

\item{\code{variant_name}}{(str, optional): The name of the production variant.}

\item{\code{data_capture_config}}{(sagemaker.model_monitor.DataCaptureConfig, optional): Specifies
configuration related to Endpoint data capture for use with
Amazon SageMaker Model Monitoring. Default: None.}

\item{\code{tags}}{(list[list], optional): `List to tags`
\url{https://docs.aws.amazon.com/sagemaker/latest/dg/API_Tag.html}
to associate with the resource.}

\item{\code{...}}{: Extra Fields passed to Task class}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{EndpointConfigStep$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
