% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/steps_sagemaker.R
\name{TrainingStep}
\alias{TrainingStep}
\title{Sagemaker TrainingStep task class}
\description{
Creates a Task State to execute a `SageMaker Training Job`
             \url{https://docs.aws.amazon.com/sagemaker/latest/dg/API_CreateTrainingJob.html}
             The TrainingStep will also create a model by default, and the model shares
             the same name as the training job.
}
\section{Super classes}{
\code{\link[stepfunctions:Block]{stepfunctions::Block}} -> \code{\link[stepfunctions:State]{stepfunctions::State}} -> \code{\link[stepfunctions:Task]{stepfunctions::Task}} -> \code{TrainingStep}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{TrainingStep$new()}}
\item \href{#method-get_expected_model}{\code{TrainingStep$get_expected_model()}}
\item \href{#method-clone}{\code{TrainingStep$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="Block" data-id="is_field_allowed">}\href{../../stepfunctions/html/Block.html#method-is_field_allowed}{\code{stepfunctions::Block$is_field_allowed()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="Block" data-id="to_json">}\href{../../stepfunctions/html/Block.html#method-to_json}{\code{stepfunctions::Block$to_json()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id=".next">}\href{../../stepfunctions/html/State.html#method-.next}{\code{stepfunctions::State$.next()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="accept">}\href{../../stepfunctions/html/State.html#method-accept}{\code{stepfunctions::State$accept()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="add_catch">}\href{../../stepfunctions/html/State.html#method-add_catch}{\code{stepfunctions::State$add_catch()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="add_retry">}\href{../../stepfunctions/html/State.html#method-add_retry}{\code{stepfunctions::State$add_retry()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="format">}\href{../../stepfunctions/html/State.html#method-format}{\code{stepfunctions::State$format()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="output">}\href{../../stepfunctions/html/State.html#method-output}{\code{stepfunctions::State$output()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="to_list">}\href{../../stepfunctions/html/State.html#method-to_list}{\code{stepfunctions::State$to_list()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="update_parameters">}\href{../../stepfunctions/html/State.html#method-update_parameters}{\code{stepfunctions::State$update_parameters()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="Task" data-id="allowed_fields">}\href{../../stepfunctions/html/Task.html#method-allowed_fields}{\code{stepfunctions::Task$allowed_fields()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialize TrainingStep class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TrainingStep$new(
  state_id,
  estimator,
  job_name,
  data = NULL,
  hyperparameters = NULL,
  mini_batch_size = NULL,
  experiment_config = NULL,
  wait_for_completion = TRUE,
  tags = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state_id}}{(str): State name whose length **must be** less than or equal
to 128 unicode characters. State names **must be** unique
within the scope of the whole state machine.}

\item{\code{estimator}}{(sagemaker.estimator.EstimatorBase): The estimator for the training
step. Can be a `BYO estimator, Framework estimator`
\url{https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html}
or `Amazon built-in algorithm estimator`
\url{https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html}.}

\item{\code{job_name}}{(str or Placeholder): Specify a training job name, this is required for
the training job to run. We recommend to use :py:class:`~stepfunctions.inputs.ExecutionInput`
placeholder collection to pass the value dynamically in each execution.}

\item{\code{data}}{: Information about the training data. Please refer to the ``fit()``
method of the associated estimator, as this can take any of the following forms:
\itemize{
   \item{(str) - The S3 location where training data is saved.}
   \item{(list[str, str] or list[str, sagemaker.inputs.TrainingInput]) - If using multiple
         channels for training data, you can specify a list mapping channel names to
         strings or :func:`~sagemaker.inputs.TrainingInput` objects.}
   \item{(sagemaker.inputs.TrainingInput) - Channel configuration for S3 data sources that can
         provide additional information about the training dataset. See
         :func:`sagemaker.inputs.TrainingInput` for full details.}
   \item{(sagemaker.amazon.amazon_estimator.RecordSet) - A collection of
         Amazon :class:`Record` objects serialized and stored in S3.
         For use with an estimator for an Amazon algorithm.}
   \item{(list[sagemaker.amazon.amazon_estimator.RecordSet]) - A list of
         :class:`sagemaker.amazon.amazon_estimator.RecordSet` objects,
         where each instance is a different channel of training data.}
}}

\item{\code{hyperparameters}}{(list, optional): Specify the hyper parameters for the training. (Default: None)}

\item{\code{mini_batch_size}}{(int): Specify this argument only when estimator is a built-in
estimator of an Amazon algorithm. For other estimators, batch size should be
specified in the estimator.}

\item{\code{experiment_config}}{(list, optional): Specify the experiment config for the training. (Default: None)}

\item{\code{wait_for_completion}}{(bool, optional): Boolean value set to `True` if the Task state
should wait for the training job to complete before proceeding to the next
step in the workflow. Set to `False` if the Task state should submit the
training job and proceed to the next step. (default: True)}

\item{\code{tags}}{(list[list], optional): List to tags \url{https://docs.aws.amazon.com/sagemaker/latest/dg/API_Tag.html}
to associate with the resource.}

\item{\code{...}}{: Extra Fields passed to Task class}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_expected_model"></a>}}
\if{latex}{\out{\hypertarget{method-get_expected_model}{}}}
\subsection{Method \code{get_expected_model()}}{
Build Sagemaker model representation of the expected trained
             model from the Training step. This can be passed
             to the ModelStep to save the trained model in Sagemaker.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TrainingStep$get_expected_model(model_name = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{model_name}}{(str, optional): Specify a model name. If not provided, training job name will be used as the model name.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
sagemaker.model.Model: Sagemaker model representation of the expected trained model.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TrainingStep$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
