% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/steps_sagemaker.R
\name{TransformStep}
\alias{TransformStep}
\title{Sagemaker TransfromStep task class}
\description{
Creates a Task State to execute a `SageMaker Transform Job`
             \url{https://docs.aws.amazon.com/sagemaker/latest/dg/API_CreateTransformJob.html}
}
\section{Super classes}{
\code{\link[stepfunctions:Block]{stepfunctions::Block}} -> \code{\link[stepfunctions:State]{stepfunctions::State}} -> \code{\link[stepfunctions:Task]{stepfunctions::Task}} -> \code{TransformStep}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{TransformStep$new()}}
\item \href{#method-clone}{\code{TransformStep$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="Block" data-id="is_field_allowed">}\href{../../stepfunctions/html/Block.html#method-is_field_allowed}{\code{stepfunctions::Block$is_field_allowed()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="Block" data-id="to_json">}\href{../../stepfunctions/html/Block.html#method-to_json}{\code{stepfunctions::Block$to_json()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id=".next">}\href{../../stepfunctions/html/State.html#method-.next}{\code{stepfunctions::State$.next()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="accept">}\href{../../stepfunctions/html/State.html#method-accept}{\code{stepfunctions::State$accept()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="add_catch">}\href{../../stepfunctions/html/State.html#method-add_catch}{\code{stepfunctions::State$add_catch()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="add_retry">}\href{../../stepfunctions/html/State.html#method-add_retry}{\code{stepfunctions::State$add_retry()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="format">}\href{../../stepfunctions/html/State.html#method-format}{\code{stepfunctions::State$format()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="output">}\href{../../stepfunctions/html/State.html#method-output}{\code{stepfunctions::State$output()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="to_list">}\href{../../stepfunctions/html/State.html#method-to_list}{\code{stepfunctions::State$to_list()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="update_parameters">}\href{../../stepfunctions/html/State.html#method-update_parameters}{\code{stepfunctions::State$update_parameters()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="Task" data-id="allowed_fields">}\href{../../stepfunctions/html/Task.html#method-allowed_fields}{\code{stepfunctions::Task$allowed_fields()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialize TranzformStep class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TransformStep$new(
  state_id,
  transformer,
  job_name,
  model_name,
  data,
  data_type = "S3Prefix",
  content_type = NULL,
  compression_type = NULL,
  split_type = NULL,
  experiment_config = NULL,
  wait_for_completion = TRUE,
  tags = NULL,
  input_filter = NULL,
  output_filter = NULL,
  join_source = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state_id}}{(str): State name whose length **must be** less than or equal
to 128 unicode characters. State names **must be** unique within the
scope of the whole state machine.}

\item{\code{transformer}}{(sagemaker.transformer.Transformer): The SageMaker transformer
to use in the TransformStep.}

\item{\code{job_name}}{(str or Placeholder): Specify a transform job name. We recommend to use
:py:class:`~stepfunctions.inputs.ExecutionInput` placeholder collection
to pass the value dynamically in each execution.}

\item{\code{model_name}}{(str or Placeholder): Specify a model name for the transform job
to use. We recommend to use :py:class:`~stepfunctions.inputs.ExecutionInput`
placeholder collection to pass the value dynamically in each execution.}

\item{\code{data}}{(str): Input data location in S3.}

\item{\code{data_type}}{(str): What the S3 location defines (default: 'S3Prefix').
Valid values:
\itemize{
    \item{'S3Prefix' - the S3 URI defines a key name prefix. All objects with this prefix will
          be used as inputs for the transform job}
    \item{'ManifestFile' - the S3 URI points to a single manifest file listing each S3 object
          to use as an input for the transform job.}
}}

\item{\code{content_type}}{(str): MIME type of the input data (default: None).}

\item{\code{compression_type}}{(str): Compression type of the input data, if compressed
(default: None). Valid values: 'Gzip', None.}

\item{\code{split_type}}{(str): The record delimiter for the input object (default: 'None').
Valid values: 'None', 'Line', 'RecordIO', and 'TFRecord'.}

\item{\code{experiment_config}}{(list, optional): Specify the experiment config for the transform. (Default: None)}

\item{\code{wait_for_completion}}{(bool, optional): Boolean value set to `True` if the Task state
should wait for the transform job to complete before proceeding to the next
step in the workflow. Set to `False` if the Task state should submit the transform
job and proceed to the next step. (default: True)}

\item{\code{tags}}{(list[list], optional): List to tags \url{https://docs.aws.amazon.com/sagemaker/latest/dg/API_Tag.html}
to associate with the resource.}

\item{\code{input_filter}}{(str): A JSONPath to select a portion of the input to pass to
the algorithm container for inference. If you omit the field, it gets the
value ‘$’, representing the entire input. For CSV data, each row is
taken as a JSON array, so only index-based JSONPaths can be applied,
e.g. $[0], $[1:]. CSV data should follow the RFC format. See Supported
JSONPath Operators for a table of supported JSONPath operators. For more
information, see the SageMaker API documentation for CreateTransformJob. Some examples:
“$[1:]”, “$.features” (default: None).}

\item{\code{output_filter}}{(str): A JSONPath to select a portion of the joined/original
output to return as the output. For more information, see the SageMaker API
documentation for CreateTransformJob. Some examples: “$[1:]”,
“$.prediction” (default: None).}

\item{\code{join_source}}{(str): The source of data to be joined to the transform output.
It can be set to ‘Input’ meaning the entire input record will be joined to
the inference result. You can use OutputFilter to select the useful portion
before uploading to S3. (default: None). Valid values: Input, None.}

\item{\code{...}}{: Extra Fields passed to Task class}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TransformStep$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
