% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/steps_states.R
\name{Task}
\alias{Task}
\title{Task state class}
\description{
Task State causes the interpreter to execute the work identified by the state’s `resource` field.
}
\section{Super classes}{
\code{\link[stepfunctions:Block]{stepfunctions::Block}} -> \code{\link[stepfunctions:State]{stepfunctions::State}} -> \code{Task}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Task$new()}}
\item \href{#method-allowed_fields}{\code{Task$allowed_fields()}}
\item \href{#method-clone}{\code{Task$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="Block" data-id="is_field_allowed">}\href{../../stepfunctions/html/Block.html#method-is_field_allowed}{\code{stepfunctions::Block$is_field_allowed()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="Block" data-id="to_json">}\href{../../stepfunctions/html/Block.html#method-to_json}{\code{stepfunctions::Block$to_json()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id=".next">}\href{../../stepfunctions/html/State.html#method-.next}{\code{stepfunctions::State$.next()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="accept">}\href{../../stepfunctions/html/State.html#method-accept}{\code{stepfunctions::State$accept()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="add_catch">}\href{../../stepfunctions/html/State.html#method-add_catch}{\code{stepfunctions::State$add_catch()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="add_retry">}\href{../../stepfunctions/html/State.html#method-add_retry}{\code{stepfunctions::State$add_retry()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="format">}\href{../../stepfunctions/html/State.html#method-format}{\code{stepfunctions::State$format()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="output">}\href{../../stepfunctions/html/State.html#method-output}{\code{stepfunctions::State$output()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="to_list">}\href{../../stepfunctions/html/State.html#method-to_list}{\code{stepfunctions::State$to_list()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="update_parameters">}\href{../../stepfunctions/html/State.html#method-update_parameters}{\code{stepfunctions::State$update_parameters()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialize Task state class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Task$new(
  state_id,
  resource,
  timeout_seconds = NULL,
  timeout_seconds_path = NULL,
  heartbeat_seconds = NULL,
  heartbeat_seconds_path = NULL,
  comment = NULL,
  input_path = NULL,
  parameters = NULL,
  result_path = NULL,
  output_path = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state_id}}{(str): State name whose length **must be** less than or equal
to 128 unicode characters. State names **must be** unique within
the scope of the whole state machine.}

\item{\code{resource}}{(str): A URI that uniquely identifies the specific task to
execute. The States language does not constrain the URI scheme
nor any other part of the URI.}

\item{\code{timeout_seconds}}{(int, optional): Positive integer specifying timeout
for the state in seconds. If the state runs longer than the specified
timeout, then the interpreter fails the state with a `States.Timeout`
Error Name. (default: 60)}

\item{\code{timeout_seconds_path}}{(str, optional): Path specifying the state's timeout
value in seconds from the state input. When resolved, the path must
select a field whose value is a positive integer.}

\item{\code{heartbeat_seconds}}{(int, optional): Positive integer specifying heartbeat
timeout for the state in seconds. This value should be lower than
the one specified for `timeout_seconds`. If more time than the specified
heartbeat elapses between heartbeats from the task, then the interpreter
fails the state with a `States.Timeout` Error Name.}

\item{\code{heartbeat_seconds_path}}{(str, optional): Path specifying the state's heartbeat
value in seconds from the state input. When resolved, the path must select
a field whose value is a positive integer.}

\item{\code{comment}}{(str, optional): Human-readable comment or description. (default: None)}

\item{\code{input_path}}{(str, optional): Path applied to the state’s raw input to select
some or all of it; that selection is used by the state. (default: '$')}

\item{\code{parameters}}{(list, optional): The value of this field becomes the effective
input for the state.}

\item{\code{result_path}}{(str, optional): Path specifying the raw input’s combination
with or replacement by the state’s result. (default: '$')}

\item{\code{output_path}}{(str, optional): Path applied to the state’s output after
the application of `result_path`, producing the effective output
which serves as the raw input for the next state. (default: '$')}

\item{\code{...}}{: Extra field names to pass to Block class}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-allowed_fields"></a>}}
\if{latex}{\out{\hypertarget{method-allowed_fields}{}}}
\subsection{Method \code{allowed_fields()}}{
allowed extra fields
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Task$allowed_fields()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Task$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
