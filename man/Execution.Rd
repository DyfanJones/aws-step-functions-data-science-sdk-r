% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/workflow_stepfunctions.R
\name{Execution}
\alias{Execution}
\title{Execution class}
\description{
Class for managing a workflow execution.
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-inherit}{\code{Execution$inherit()}}
\item \href{#method-stop}{\code{Execution$stop()}}
\item \href{#method-list_events}{\code{Execution$list_events()}}
\item \href{#method-describe}{\code{Execution$describe()}}
\item \href{#method-render_progress}{\code{Execution$render_progress()}}
\item \href{#method-get_input}{\code{Execution$get_input()}}
\item \href{#method-get_output}{\code{Execution$get_output()}}
\item \href{#method-format}{\code{Execution$format()}}
\item \href{#method-print}{\code{Execution$print()}}
\item \href{#method-clone}{\code{Execution$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-inherit"></a>}}
\if{latex}{\out{\hypertarget{method-inherit}{}}}
\subsection{Method \code{inherit()}}{
Initialize Execution class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Execution$inherit(
  workflow,
  execution_arn,
  start_date,
  status,
  client = NULL,
  name = NULL,
  stop_date = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{workflow}}{(Workflow): Step Functions workflow instance.}

\item{\code{execution_arn}}{(str): The Amazon Resource Name (ARN) of the workflow execution.}

\item{\code{start_date}}{(datetime.datetime): The date the workflow execution was started.}

\item{\code{status}}{(RunStatus): Status of the workflow execution.}

\item{\code{client}}{(SFN.Client, optional): \code{\link[paws]{sfn}} client to use for running and
managing the workflow executions on Step Functions. If no client
is provided, the \code{\link[paws]{sfn}} client from the parent workflow will be used. (default: None)}

\item{\code{name}}{(str, optional): Name for the workflow execution. (default: None)}

\item{\code{stop_date}}{(datetime.datetime, optional): The date the workflow execution
was stopped, if applicable. (default: None)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-stop"></a>}}
\if{latex}{\out{\hypertarget{method-stop}{}}}
\subsection{Method \code{stop()}}{
Stops a workflow execution.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Execution$stop(cause = NULL, error = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{cause}}{(str, optional): A more detailed explanation of the cause of the failure. (default: None)}

\item{\code{error}}{(str, optional): The error code of the failure. (default: None)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
list: Datetime of when the workflow execution was stopped. Example below::
\code{
list(
 stopDate = as.POSIXct(
   "2015-01-01"
 )
)
}
**Response structure**:
\itemize{
   \item{(list)}
   \item{stopDate (datetime): The date the workflow execution is stopped}
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-list_events"></a>}}
\if{latex}{\out{\hypertarget{method-list_events}{}}}
\subsection{Method \code{list_events()}}{
Lists the events in the workflow execution.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Execution$list_events(max_items = 100, reverse_order = FALSE, html = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{max_items}}{(int, optional): The maximum number of items to be returned.
(default: 100)}

\item{\code{reverse_order}}{(bool, optional): Boolean flag set to `True` if the events
should be listed in reverse chronological order. Set to `False`,
if the order should be in chronological order. (default: False)}

\item{\code{html}}{(bool, optional): Renders the list as an HTML table (If running in
an IRKernel environment). If the parameter is not provided, or set
to FALSE, a R list is returned. (default: False)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
list: Object containing the list of workflow execution events. Refer
             to :meth:`.SFN.Client.get_execution_history()` for the response structure.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-describe"></a>}}
\if{latex}{\out{\hypertarget{method-describe}{}}}
\subsection{Method \code{describe()}}{
Describes a workflow execution.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Execution$describe()}\if{html}{\out{</div>}}
}

\subsection{Returns}{

}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-render_progress"></a>}}
\if{latex}{\out{\hypertarget{method-render_progress}{}}}
\subsection{Method \code{render_progress()}}{
Renders a visualization of the workflow execution graph.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Execution$render_progress(portrait = FALSE, max_events = 25000)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{portrait}}{(bool, optional): Boolean flag set to `True` if the workflow
execution graph should be rendered in portrait orientation. Set
to `False`, if the graph should be rendered in landscape orientation. (default: False)}

\item{\code{max_events}}{(int, optional): Specifies the number of events to be visualized
in the workflow execution graph. (default: 25000)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_input"></a>}}
\if{latex}{\out{\hypertarget{method-get_input}{}}}
\subsection{Method \code{get_input()}}{
Get the input for the workflow execution.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Execution$get_input()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
list: Workflow execution input.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_output"></a>}}
\if{latex}{\out{\hypertarget{method-get_output}{}}}
\subsection{Method \code{get_output()}}{
Get the output for the workflow execution.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Execution$get_output(wait = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{wait}}{(bool, optional): Boolean flag set to `True` if the call should
wait for a running workflow execution to end before returning
the output. Set to `False`, otherwise. Note that if the status
is running, and `wait` is set to `True`, this will be a blocking
call. (default: False)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
list: Workflow execution output.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-format"></a>}}
\if{latex}{\out{\hypertarget{method-format}{}}}
\subsection{Method \code{format()}}{
format class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Execution$format()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
print class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Execution$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Execution$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
