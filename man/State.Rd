% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/steps_states.R
\name{State}
\alias{State}
\title{State base class}
\description{
A class for creating a State block.
}
\section{Super class}{
\code{\link[stepfunctions:Block]{stepfunctions::Block}} -> \code{State}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{State$new()}}
\item \href{#method-allowed_fields}{\code{State$allowed_fields()}}
\item \href{#method-update_parameters}{\code{State$update_parameters()}}
\item \href{#method-.next}{\code{State$.next()}}
\item \href{#method-output}{\code{State$output()}}
\item \href{#method-accept}{\code{State$accept()}}
\item \href{#method-add_retry}{\code{State$add_retry()}}
\item \href{#method-add_catch}{\code{State$add_catch()}}
\item \href{#method-to_list}{\code{State$to_list()}}
\item \href{#method-format}{\code{State$format()}}
\item \href{#method-clone}{\code{State$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="Block" data-id="is_field_allowed">}\href{../../stepfunctions/html/Block.html#method-is_field_allowed}{\code{stepfunctions::Block$is_field_allowed()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="Block" data-id="to_json">}\href{../../stepfunctions/html/Block.html#method-to_json}{\code{stepfunctions::Block$to_json()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialize State base class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{State$new(
  state_id,
  state_type,
  output_schema = NULL,
  comment = NULL,
  input_path = NULL,
  parameters = NULL,
  result_path = NULL,
  output_path = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state_id}}{(str): State name whose length **must be** less than or
equal to 128 unicode characters. State names **must be**
unique within the scope of the whole state machine.}

\item{\code{state_type}}{(str): Type of the state. (Allowed values: `'Pass'`,
`'Succeed'`, `'Fail'`, `'Wait'`, `'Task'`, `'Choice'`, `'Parallel'`, `'Map'`).}

\item{\code{output_schema}}{(dict): Expected output schema for the State. This is
used to validate placeholder inputs used by the next state in
the state machine. (default: None)}

\item{\code{comment}}{(str, optional): Human-readable comment or description. (default: None)}

\item{\code{input_path}}{(str, optional): Path applied to the state’s raw input to
select some or all of it; that selection is used by the state. (default: '$')}

\item{\code{parameters}}{(dict, optional): The value of this field becomes the effective
input for the state.}

\item{\code{result_path}}{(str, optional): Path specifying the raw input’s combination
with or replacement by the state’s result. (default: '$')}

\item{\code{output_path}}{(str, optional): Path applied to the state’s output after
the application of `result_path`, producing the effective output
which serves as the raw input for the next state. (default: '$')}

\item{\code{...}}{: Extra field names to pass to Block class}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-allowed_fields"></a>}}
\if{latex}{\out{\hypertarget{method-allowed_fields}{}}}
\subsection{Method \code{allowed_fields()}}{
allowed extra fields
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{State$allowed_fields()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-update_parameters"></a>}}
\if{latex}{\out{\hypertarget{method-update_parameters}{}}}
\subsection{Method \code{update_parameters()}}{
Update `parameters` field in the state, if supported.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{State$update_parameters(params)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{params}}{(dict or list): The value of this field becomes the effective input for the state.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-.next"></a>}}
\if{latex}{\out{\hypertarget{method-.next}{}}}
\subsection{Method \code{.next()}}{
Specify the next state or chain to transition to.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{State$.next(next_step)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{next_step}}{(State or Chain): Next state or chain to transition to.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
State or Chain: Next state or chain that will be transitioned to.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-output"></a>}}
\if{latex}{\out{\hypertarget{method-output}{}}}
\subsection{Method \code{output()}}{
Get the placeholder collection for the State's output.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{State$output()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
StepInput: Placeholder collection representing the State's output,
             and consequently the input to the next state in the workflow (if one exists).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-accept"></a>}}
\if{latex}{\out{\hypertarget{method-accept}{}}}
\subsection{Method \code{accept()}}{
placeholder
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{State$accept(visitor)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{visitor}}{placeholder}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_retry"></a>}}
\if{latex}{\out{\hypertarget{method-add_retry}{}}}
\subsection{Method \code{add_retry()}}{
Add a Retry block to the tail end of the list of retriers for the state.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{State$add_retry(retry)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{retry}}{(Retry): Retry block to add.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_catch"></a>}}
\if{latex}{\out{\hypertarget{method-add_catch}{}}}
\subsection{Method \code{add_catch()}}{
Add a Catch block to the tail end of the list of catchers for the state.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{State$add_catch(catch)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{catch}}{(Catch): Catch block to add.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-to_list"></a>}}
\if{latex}{\out{\hypertarget{method-to_list}{}}}
\subsection{Method \code{to_list()}}{
Convert class to list ready to be translated for
             `Amazon States Language <https://states-language.net/spec.html>`.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{State$to_list()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-format"></a>}}
\if{latex}{\out{\hypertarget{method-format}{}}}
\subsection{Method \code{format()}}{
class formatting
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{State$format()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{State$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
