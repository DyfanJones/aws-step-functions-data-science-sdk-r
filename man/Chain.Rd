% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/steps_states.R
\name{Chain}
\alias{Chain}
\title{Chain class}
\description{
Chain is a logical group of states, that resembles a linked list.
             The start state is the head of the *Chain* and the end state is the
             tail of the *Chain*.
}
\examples{

## ------------------------------------------------
## Method `Chain$new`
## ------------------------------------------------

library(stepfunctions)
s1_pass = Pass$new('Step - One')
s2_pass = Pass$new('Step - two')
s3_pass = Pass$new('Step - three')
chain1 = Chain$new(c(s1_pass, s2_pass))
chain2 = Chain$new(c(s3_pass, chain1))
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{state_id}}{Chain class state_id}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Chain$new()}}
\item \href{#method-append}{\code{Chain$append()}}
\item \href{#method-accept}{\code{Chain$accept()}}
\item \href{#method-format}{\code{Chain$format()}}
\item \href{#method-clone}{\code{Chain$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialise Chain class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Chain$new(steps = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{steps}}{(list(State), optional): List of states to be chained in-order. (default: list())}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{library(stepfunctions)
s1_pass = Pass$new('Step - One')
s2_pass = Pass$new('Step - two')
s3_pass = Pass$new('Step - three')
chain1 = Chain$new(c(s1_pass, s2_pass))
chain2 = Chain$new(c(s3_pass, chain1))
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-append"></a>}}
\if{latex}{\out{\hypertarget{method-append}{}}}
\subsection{Method \code{append()}}{
Add a state at the tail end of the chain.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Chain$append(step)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{step}}{(State): State to insert at the tail end of the chain.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-accept"></a>}}
\if{latex}{\out{\hypertarget{method-accept}{}}}
\subsection{Method \code{accept()}}{
placeholder
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Chain$accept(visitor)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{visitor}}{placeholder}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-format"></a>}}
\if{latex}{\out{\hypertarget{method-format}{}}}
\subsection{Method \code{format()}}{
class formatting
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Chain$format()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Chain$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
