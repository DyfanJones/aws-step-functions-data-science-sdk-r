% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/inputs_placeholders.R
\name{Placeholder}
\alias{Placeholder}
\title{Placeholder Class}
\description{
A collection of Placeholder variables.
}
\keyword{internal}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Placeholder$new()}}
\item \href{#method-get}{\code{Placeholder$get()}}
\item \href{#method-get_schema_as_list}{\code{Placeholder$get_schema_as_list()}}
\item \href{#method-get_schema_as_json}{\code{Placeholder$get_schema_as_json()}}
\item \href{#method-contains}{\code{Placeholder$contains()}}
\item \href{#method-validate}{\code{Placeholder$validate()}}
\item \href{#method-to_jsonpath}{\code{Placeholder$to_jsonpath()}}
\item \href{#method-clone}{\code{Placeholder$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialize Placeholder class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Placeholder$new(schema = NULL, name = NULL, type = NULL, parent = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{schema}}{(dict, optional): Schema for the placeholder collection. (default: None)
Example below::
  {
'ModelName': str,
'JobName': str,
'Hyperparameters': {
'tol': float
}
}
Keyword Args:}

\item{\code{name}}{(str, optional): Name of the placeholder variable. (default: None)}

\item{\code{type}}{(type, optional): Type of the placeholder variable. (default: None)}

\item{\code{parent}}{(Placeholder, optional): Parent variable for a placeholder variable. (default: None)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get"></a>}}
\if{latex}{\out{\hypertarget{method-get}{}}}
\subsection{Method \code{get()}}{
Create a placeholder variable with an associated type.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Placeholder$get(name, type)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{(str): Name of the placeholder variable.}

\item{\code{type}}{(type): Type of the placeholder variable.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Placeholder: Placeholder variable.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_schema_as_list"></a>}}
\if{latex}{\out{\hypertarget{method-get_schema_as_list}{}}}
\subsection{Method \code{get_schema_as_list()}}{
Generate a schema for the placeholder collection as a Python dictionary.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Placeholder$get_schema_as_list()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
list: Placeholder collection schema.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_schema_as_json"></a>}}
\if{latex}{\out{\hypertarget{method-get_schema_as_json}{}}}
\subsection{Method \code{get_schema_as_json()}}{
Generate a schema for the placeholder collection as a JSON formatted string.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Placeholder$get_schema_as_json(pretty = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{pretty}}{(bool, optional): Boolean flag set to `True` if JSON string should be prettified. `False`, otherwise. (default: False)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
str: JSON formatted string representation of the block.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-contains"></a>}}
\if{latex}{\out{\hypertarget{method-contains}{}}}
\subsection{Method \code{contains()}}{
Check if the placeholder collection contains the specified placeholder variable.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Placeholder$contains(placeholder)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{placeholder}}{(Placeholder): Placeholder variable to search for, in the collection.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
bool: `True` if placeholder variable was found in the collection. `False`, otherwise.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-validate"></a>}}
\if{latex}{\out{\hypertarget{method-validate}{}}}
\subsection{Method \code{validate()}}{
Validate a specified input against the placeholder collection schema.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Placeholder$validate(input = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{(dict): Input to validate against the placeholder collection schema.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
ValidationResult: Named tuple with the keys:
    \itemize{
        \item{`valid` (Boolean): Representing the result of validation}
        \item{`keys_missing` (list(str)): List of keys missing in the input}
        \item{`keys_type_mismatch` (list(str), type, type): List of tuples with key name, expected type, and provided type.}
     }
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-to_jsonpath"></a>}}
\if{latex}{\out{\hypertarget{method-to_jsonpath}{}}}
\subsection{Method \code{to_jsonpath()}}{
Returns a JSON path representation of the placeholder variable to be used for step parameters.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Placeholder$to_jsonpath()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
str: JSON path representation of the placeholder variable
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Placeholder$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
