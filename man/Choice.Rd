% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/steps_states.R
\name{Choice}
\alias{Choice}
\title{Choice State class}
\description{
Choice state adds branching logic to a state machine. The state
             holds a list of *rule* and *next_step* pairs. The interpreter attempts
             pattern-matches against the rules in list order and transitions to the
             state or chain specified in the *next_step* field on the first *rule* where
             there is an exact match between the input value and a member of the
             comparison-operator array. When used in a chain, the subsequent step
             becomes the default choice that executes if none of the specified rules match.
}
\section{Super classes}{
\code{\link[stepfunctions:Block]{stepfunctions::Block}} -> \code{\link[stepfunctions:State]{stepfunctions::State}} -> \code{Choice}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Choice$new()}}
\item \href{#method-allowed_fields}{\code{Choice$allowed_fields()}}
\item \href{#method-add_choice}{\code{Choice$add_choice()}}
\item \href{#method-default_choice}{\code{Choice$default_choice()}}
\item \href{#method-to_list}{\code{Choice$to_list()}}
\item \href{#method-accept}{\code{Choice$accept()}}
\item \href{#method-clone}{\code{Choice$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="Block" data-id="is_field_allowed">}\href{../../stepfunctions/html/Block.html#method-is_field_allowed}{\code{stepfunctions::Block$is_field_allowed()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="Block" data-id="to_json">}\href{../../stepfunctions/html/Block.html#method-to_json}{\code{stepfunctions::Block$to_json()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id=".next">}\href{../../stepfunctions/html/State.html#method-.next}{\code{stepfunctions::State$.next()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="add_catch">}\href{../../stepfunctions/html/State.html#method-add_catch}{\code{stepfunctions::State$add_catch()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="add_retry">}\href{../../stepfunctions/html/State.html#method-add_retry}{\code{stepfunctions::State$add_retry()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="format">}\href{../../stepfunctions/html/State.html#method-format}{\code{stepfunctions::State$format()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="output">}\href{../../stepfunctions/html/State.html#method-output}{\code{stepfunctions::State$output()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="stepfunctions" data-topic="State" data-id="update_parameters">}\href{../../stepfunctions/html/State.html#method-update_parameters}{\code{stepfunctions::State$update_parameters()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialize Choice class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Choice$new(
  state_id,
  comment = NULL,
  input_path = NULL,
  output_path = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state_id}}{(str): State name whose length **must be** less than
or equal to 128 unicode characters. State names **must be**
unique within the scope of the whole state machine.}

\item{\code{comment}}{(str, optional): Human-readable comment or description. (default: None)}

\item{\code{input_path}}{(str, optional): Path applied to the state’s raw input
to select some or all of it; that selection is used by the state. (default: '$')}

\item{\code{output_path}}{(str, optional): Path applied to the state’s output,
producing the effective output which serves as the raw input
for the next state. (default: '$')}

\item{\code{...}}{: Extra field names to pass to Block class}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-allowed_fields"></a>}}
\if{latex}{\out{\hypertarget{method-allowed_fields}{}}}
\subsection{Method \code{allowed_fields()}}{
allowed extra fields
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Choice$allowed_fields()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_choice"></a>}}
\if{latex}{\out{\hypertarget{method-add_choice}{}}}
\subsection{Method \code{add_choice()}}{
Add a *rule*, *next_step* pair to the choice state.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Choice$add_choice(rule, next_step)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{rule}}{(:R:class:`stepfunctions.steps.choice_rule.BaseRule`): Rule to pattern match the input against.}

\item{\code{next_step}}{(State or Chain): Next state or chain to transition to, if `rule` is matches with the input.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-default_choice"></a>}}
\if{latex}{\out{\hypertarget{method-default_choice}{}}}
\subsection{Method \code{default_choice()}}{
Add a default step to the choice state.
             The default step executes if none of the specified rules match.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Choice$default_choice(next_step)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{next_step}}{(State or Chain): Next state or chain to transition to, if none of the specified rules match.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-to_list"></a>}}
\if{latex}{\out{\hypertarget{method-to_list}{}}}
\subsection{Method \code{to_list()}}{
Convert class to list ready to be translated for
             Amazon States Language \url{https://states-language.net/spec.html}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Choice$to_list()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-accept"></a>}}
\if{latex}{\out{\hypertarget{method-accept}{}}}
\subsection{Method \code{accept()}}{
placeholder
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Choice$accept(visitor)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{visitor}}{placeholder}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Choice$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
